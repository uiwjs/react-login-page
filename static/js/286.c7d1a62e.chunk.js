"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[286],{6286:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r={components:{177:function(){function e(n){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(n)}var n=function(n,t){if("function"==typeof WeakMap)var r=new WeakMap,o=new WeakMap;return function(n,t){if(!t&&n&&n.__esModule)return n;var i,a,l={__proto__:null,default:n};if(null===n||"object"!=e(n)&&"function"!=typeof n)return l;if(i=t?o:r){if(i.has(n))return i.get(n);i.set(n,l)}for(var p in n)"default"!==p&&{}.hasOwnProperty.call(n,p)&&((a=(i=Object.defineProperty)&&Object.getOwnPropertyDescriptor(n,p))&&(a.get||a.set)?i(l,p,a):l[p]=n[p]);return l}(n,t)}(t(905)),r=t(9545),o=["keyname"],i=["keyname","name"],a=["keyname"],l=["children","className"];function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(n,t,r){return(t=function(n){var t=function(n,t){if("object"!=e(n)||!n)return n;var r=n[Symbol.toPrimitive];if(void 0!==r){var o=r.call(n,t||"default");if("object"!=e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(n)}(n,"string");return"symbol"==e(t)?t:t+""}(t))in n?Object.defineProperty(n,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[t]=r,n}function c(){return c=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},c.apply(null,arguments)}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==n.indexOf(r))continue;t[r]=e[r]}return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],-1===n.indexOf(t)&&{}.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=function(e){var t=e.keyname,i=void 0===t?"title":t,a=u(e,o);return a.children||(a.children="Login"),n.default.createElement(r.Block,c({},a,{keyname:i}))};d.displayName="ExampleLogin.Title";var f=function(e){var t=e.keyname,o=void 0===t?"username":t,a=e.name,l=u(e,i);return n.default.createElement(r.Input,c({placeholder:"Username",spellCheck:!1},l,{name:a||o,keyname:o||a}))};f.displayName="LoginExamplePage.Username";var y=function(e){var t=e.keyname,o=void 0===t?"submit":t,i=u(e,a);return i.children||(i.children="Submit"),n.default.createElement(r.Button,c({type:"submit",keyname:o},i))};y.displayName="LoginExamplePage.Submit";var g=function(){var e=(0,r.useStore)(),t=e.blocks,o=void 0===t?{}:t,i=e.data,a=void 0===i?{}:i,l=a.fields,p=a.buttons;return n.default.createElement(r.Render,null,n.default.createElement("div",{className:"login-page-example-wrapper"},n.default.createElement("b",null,o.title),l.sort((function(e,n){return e.index-n.index})).map((function(e,t){return n.default.createElement("label",{key:e.name+t},e.children)})),n.default.createElement("section",null,p.sort((function(e,n){return e.index-n.index})).map((function(e,t){var r=e.children;return(0,n.isValidElement)(r)?(0,n.cloneElement)(r,m(m({},r.props),{},{key:e.name+t})):null})))))},P=function(e){var t=e.children,o=e.className,i=u(e,l);return n.default.createElement(r.Provider,null,n.default.createElement(d,null,"Example Title"),n.default.createElement(f,null),n.default.createElement(y,null),n.default.createElement(y,{keyname:"resetBtn",type:"reset"},"Reset"),n.default.createElement(r.Container,c({},i,{className:"login-page-example ".concat(o||"")}),n.default.createElement(g,null),t))};P.displayName="LoginExamplePage",P.Title=d;return function(){return n.default.createElement(P,null)}}()},data:{177:{name:177,meta:{},code:'"use strict";\n\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nvar _react = _interopRequireWildcard(require("react"));\nvar _reactLoginPage = require("react-login-page");\nvar _excluded = ["keyname"],\n  _excluded2 = ["keyname", "name"],\n  _excluded3 = ["keyname"],\n  _excluded4 = ["children", "className"];\nfunction _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t2 in e) "default" !== _t2 && {}.hasOwnProperty.call(e, _t2) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t2)) && (i.get || i.set) ? o(f, _t2, i) : f[_t2] = e[_t2]); return f; })(e, t); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n// <Title /> Component\nvar Title = function Title(props) {\n  var _props$keyname = props.keyname,\n    keyname = _props$keyname === void 0 ? \'title\' : _props$keyname,\n    elmProps = _objectWithoutProperties(props, _excluded);\n  if (!elmProps.children) {\n    elmProps.children = \'Login\';\n  }\n  return /*#__PURE__*/_react["default"].createElement(_reactLoginPage.Block, _extends({}, elmProps, {\n    keyname: keyname\n  }));\n};\nTitle.displayName = \'ExampleLogin.Title\';\n\n// <Username /> Component\nvar Username = function Username(props) {\n  var _props$keyname2 = props.keyname,\n    keyname = _props$keyname2 === void 0 ? \'username\' : _props$keyname2,\n    name = props.name,\n    elmProps = _objectWithoutProperties(props, _excluded2);\n  return /*#__PURE__*/_react["default"].createElement(_reactLoginPage.Input, _extends({\n    placeholder: "Username",\n    spellCheck: false\n  }, elmProps, {\n    name: name || keyname,\n    keyname: keyname || name\n  }));\n};\nUsername.displayName = \'LoginExamplePage.Username\';\n\n// <Submit /> Component\nvar Submit = function Submit(props) {\n  var _props$keyname3 = props.keyname,\n    keyname = _props$keyname3 === void 0 ? \'submit\' : _props$keyname3,\n    elmProps = _objectWithoutProperties(props, _excluded3);\n  if (!elmProps.children) {\n    elmProps.children = \'Submit\';\n  }\n  return /*#__PURE__*/_react["default"].createElement(_reactLoginPage.Button, _extends({\n    type: "submit",\n    keyname: keyname\n  }, elmProps));\n};\nSubmit.displayName = \'LoginExamplePage.Submit\';\nvar RenderLogin = function RenderLogin() {\n  var _useStore = (0, _reactLoginPage.useStore)(),\n    _useStore$blocks = _useStore.blocks,\n    blocks = _useStore$blocks === void 0 ? {} : _useStore$blocks,\n    _useStore$data = _useStore.data,\n    data = _useStore$data === void 0 ? {} : _useStore$data;\n  var fields = data.fields,\n    buttons = data.buttons;\n  return /*#__PURE__*/_react["default"].createElement(_reactLoginPage.Render, null, /*#__PURE__*/_react["default"].createElement("div", {\n    className: "login-page-example-wrapper"\n  }, /*#__PURE__*/_react["default"].createElement("b", null, blocks.title), fields.sort(function (a, b) {\n    return a.index - b.index;\n  }).map(function (item, idx) {\n    return /*#__PURE__*/_react["default"].createElement("label", {\n      key: item.name + idx\n    }, item.children);\n  }), /*#__PURE__*/_react["default"].createElement("section", null, buttons.sort(function (a, b) {\n    return a.index - b.index;\n  }).map(function (item, idx) {\n    var child = item.children;\n    if (! /*#__PURE__*/(0, _react.isValidElement)(child)) return null;\n    return /*#__PURE__*/(0, _react.cloneElement)(child, _objectSpread(_objectSpread({}, child.props), {}, {\n      key: item.name + idx\n    }));\n  }))));\n};\nvar LoginPage = function LoginPage(_ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    divProps = _objectWithoutProperties(_ref, _excluded4);\n  return /*#__PURE__*/_react["default"].createElement(_reactLoginPage.Provider, null, /*#__PURE__*/_react["default"].createElement(Title, null, "Example Title"), /*#__PURE__*/_react["default"].createElement(Username, null), /*#__PURE__*/_react["default"].createElement(Submit, null), /*#__PURE__*/_react["default"].createElement(Submit, {\n    keyname: "resetBtn",\n    type: "reset"\n  }, "Reset"), /*#__PURE__*/_react["default"].createElement(_reactLoginPage.Container, _extends({}, divProps, {\n    className: "login-page-example ".concat(className || \'\')\n  }), /*#__PURE__*/_react["default"].createElement(RenderLogin, null), children));\n};\nvar Login = LoginPage;\nLogin.displayName = \'LoginExamplePage\';\nLogin.Title = Title;\n\n// Here, we use the encapsulated <Login /> component\nvar Example = function Example() {\n  return /*#__PURE__*/_react["default"].createElement(Login, null);\n};\nreturn Example;',language:"tsx",value:"import React, { FC, PropsWithChildren, isValidElement, cloneElement } from 'react';\nimport { Render, Provider, Container, useStore } from 'react-login-page';\nimport { Block, BlockProps, BlockTagType } from 'react-login-page';\nimport { Button, ButtonProps } from 'react-login-page';\nimport { Input, InputProps } from 'react-login-page';\n\n// <Title /> Component\nconst Title = <T extends BlockTagType>(props: PropsWithChildren<Partial<BlockProps<T>>>) => {\n  const { keyname = 'title', ...elmProps } = props;\n  if (!elmProps.children) {\n    elmProps.children = 'Login';\n  }\n  return <Block {...elmProps} keyname={keyname} />;\n};\nTitle.displayName = 'ExampleLogin.Title';\n\n// <Username /> Component\nconst Username: FC<InputProps> = (props) => {\n  const { keyname = 'username', name, ...elmProps } = props;\n  return (\n    <Input placeholder=\"Username\" spellCheck={false} {...elmProps} name={name || keyname} keyname={keyname || name} />\n  );\n};\nUsername.displayName = 'LoginExamplePage.Username';\n\n// <Submit /> Component\nconst Submit: FC<ButtonProps> = (props) => {\n  const { keyname = 'submit', ...elmProps } = props;\n  if (!elmProps.children) {\n    elmProps.children = 'Submit';\n  }\n  return <Button type=\"submit\" keyname={keyname} {...elmProps} />;\n};\nSubmit.displayName = 'LoginExamplePage.Submit';\n\nconst RenderLogin = () => {\n  const { blocks = {}, data = {} } = useStore();\n  const { fields, buttons } = data;\n  return (\n    <Render>\n      <div className=\"login-page-example-wrapper\">\n        <b>{blocks.title}</b>\n        {fields\n          .sort((a, b) => a.index - b.index)\n          .map((item, idx) => {\n            return <label key={item.name + idx}>{item.children}</label>;\n          })}\n        <section>\n          {buttons\n            .sort((a, b) => a.index - b.index)\n            .map((item, idx) => {\n              const child = item.children;\n              if (!isValidElement(child)) return null;\n              return cloneElement(child, {\n                ...child.props,\n                key: item.name + idx,\n              });\n            })}\n        </section>\n      </div>\n    </Render>\n  );\n};\n\nconst LoginPage: FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> = ({\n  children,\n  className,\n  ...divProps\n}) => {\n  return (\n    <Provider>\n      <Title>Example Title</Title>\n      <Username />\n      <Submit />\n      <Submit keyname=\"resetBtn\" type=\"reset\">\n        Reset\n      </Submit>\n      <Container {...divProps} className={`login-page-example ${className || ''}`}>\n        <RenderLogin />\n        {children}\n      </Container>\n    </Provider>\n  );\n};\n\ntype LoginComponent = FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> & {\n  Title: typeof Title;\n};\nconst Login = LoginPage as LoginComponent;\nLogin.displayName = 'LoginExamplePage';\nLogin.Title = Title;\n\n// Here, we use the encapsulated <Login /> component\nconst Example = () => {\n  return <Login></Login>;\n};\n\nexport default Example;"}},source:"# Create Login Page\n\nWelcome to the tutorial! We will build a compact yet feature-rich login page component, teaching you how to quickly create a login page component.\n\n## Step 1: Create the Login Page Container\n\n```tsx\nimport { FC, PropsWithChildren } from 'react';\nimport { Render, Provider, Container } from 'react-login-page';\n\nconst RenderLogin = () => {\n  return (\n    <Render>\n      <div className=\"login-page-example-wrapper\"> </div>\n    </Render>\n  );\n};\n\nconst LoginPage: FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> = ({\n  children,\n  className,\n  ...divProps\n}) => {\n  return (\n    <Provider>\n      <Container {...divProps} className={`login-page-example ${className || ''}`}>\n        <RenderLogin />\n        {children}\n      </Container>\n    </Provider>\n  );\n};\n\ntype LoginComponent = FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> & {};\nconst Login = LoginPage as LoginComponent;\nLogin.displayName = 'LoginExamplePage';\n\nexport default Login;\n```\n\nIn the example above, we defined an empty `Login` component. The `<Provider>` component is used for data collection, and the layout is placed inside the `<Container>` component, which wraps a `div` around the content to be rendered. The `<Render>` component provides a flexible API to help render the component layout.\n\n## Step 2: Define a `Title` Component\n\n```tsx\nimport { PropsWithChildren } from 'react';\nimport { Block, BlockProps, BlockTagType } from 'react-login-page';\n\nexport const Title = <T extends BlockTagType>(props: PropsWithChildren<Partial<BlockProps<T>>>) => {\n  const { keyname = 'title', ...elmProps } = props;\n  if (!elmProps.children) {\n    elmProps.children = 'Login';\n  }\n  return <Block {...elmProps} keyname={keyname} />;\n};\n\nTitle.displayName = 'ExampleLogin.Title';\n```\n\nWhen using the `<Title>` component, we need to write the display logic. The `keyname` defined in the `<Title>` component is very important, as we need it when displaying the component. Its purpose is to give your component a name, and determine its position based on the name when displaying it.\n\n```tsx\nimport { Render, useStore } from 'react-login-page';\n\nconst RenderLogin = () => {\n  const { blocks = {} } = useStore();\n  return (\n    <Render>\n      <div className=\"login-page-example-wrapper\">\n        <h2>{blocks.title}</h2>\n      </div>\n    </Render>\n  );\n};\n```\n\nIf you need to display the `<Title>` component by default, you should add it to the `<Provider>` component by default.\n\n```tsx\n<Provider>\n  <Title>Example Title</Title>\n</Provider>\n```\n\n## Step 3: Define an `Input Box` Component\n\n```tsx\nimport { FC } from 'react';\nimport { Input, InputProps } from 'react-login-page';\n\nexport const Username: FC<InputProps> = (props) => {\n  const { keyname = 'username', name, ...elmProps } = props;\n  return (\n    <Input placeholder=\"Username\" spellCheck={false} {...elmProps} name={name || keyname} keyname={keyname || name} />\n  );\n};\n\nUsername.displayName = 'LoginExamplePage.Username';\n```\n\nBy default, you need to display the `<Username />` component, so add it to the `<Provider>` component.\n\n```tsx\n<Provider>\n  <Username />\n</Provider>\n```\n\n## Step 4: Define a `Submit Button` Component\n\n```tsx\nimport { FC } from 'react';\nimport { Button, ButtonProps } from 'react-login-page';\n\nexport const Submit: FC<ButtonProps> = (props) => {\n  const { keyname = 'submit', ...elmProps } = props;\n  if (!elmProps.children) {\n    elmProps.children = 'Submit';\n  }\n  return <Button type=\"submit\" keyname={keyname} {...elmProps} />;\n};\n\nSubmit.displayName = 'LoginExamplePage.Submit';\n```\n\nBy default, you need to display the `<Submit />` component, so add it to the `<Provider>` component.\n\n```tsx\n<Provider>\n  <Submit />\n</Provider>\n```\n\nIf you also need to display a `Reset Button` by default, you can add another one based on `<Submit />` in the `<Provider>` component:\n\n```tsx\n<Provider>\n  <Submit />\n  <Submit keyname=\"resetBtn\" type=\"reset\">\n    Reset\n  </Submit>\n</Provider>\n```\n\n## Step 5: Provide a Point Component\n\nDefines [dot notation](https://legacy.reactjs.org/docs/jsx-in-depth.html#using-dot-notation-for-jsx-type) components.\n\n```tsx\ntype LoginComponent = FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> & {\n  Title: typeof Title;\n  Username: typeof Username;\n  Submit: typeof Submit;\n};\nconst Login = LoginPage as LoginComponent;\n\nLogin.displayName = 'LoginExamplePage';\nLogin.Title = Title;\nLogin.Username = Username;\nLogin.Submit = Submit;\n\nexport default Login;\n```\n\n## Using the Defined Component\n\n```tsx\nimport LoginExample from '../login';\n\nfunction Demo() {\n  return <LoginExample />;\n}\n```\n\n## Complete Example\n\n```tsx mdx:preview\nimport React, { FC, PropsWithChildren, isValidElement, cloneElement } from 'react';\nimport { Render, Provider, Container, useStore } from 'react-login-page';\nimport { Block, BlockProps, BlockTagType } from 'react-login-page';\nimport { Button, ButtonProps } from 'react-login-page';\nimport { Input, InputProps } from 'react-login-page';\n\n// <Title /> Component\nconst Title = <T extends BlockTagType>(props: PropsWithChildren<Partial<BlockProps<T>>>) => {\n  const { keyname = 'title', ...elmProps } = props;\n  if (!elmProps.children) {\n    elmProps.children = 'Login';\n  }\n  return <Block {...elmProps} keyname={keyname} />;\n};\nTitle.displayName = 'ExampleLogin.Title';\n\n// <Username /> Component\nconst Username: FC<InputProps> = (props) => {\n  const { keyname = 'username', name, ...elmProps } = props;\n  return (\n    <Input placeholder=\"Username\" spellCheck={false} {...elmProps} name={name || keyname} keyname={keyname || name} />\n  );\n};\nUsername.displayName = 'LoginExamplePage.Username';\n\n// <Submit /> Component\nconst Submit: FC<ButtonProps> = (props) => {\n  const { keyname = 'submit', ...elmProps } = props;\n  if (!elmProps.children) {\n    elmProps.children = 'Submit';\n  }\n  return <Button type=\"submit\" keyname={keyname} {...elmProps} />;\n};\nSubmit.displayName = 'LoginExamplePage.Submit';\n\nconst RenderLogin = () => {\n  const { blocks = {}, data = {} } = useStore();\n  const { fields, buttons } = data;\n  return (\n    <Render>\n      <div className=\"login-page-example-wrapper\">\n        <b>{blocks.title}</b>\n        {fields\n          .sort((a, b) => a.index - b.index)\n          .map((item, idx) => {\n            return <label key={item.name + idx}>{item.children}</label>;\n          })}\n        <section>\n          {buttons\n            .sort((a, b) => a.index - b.index)\n            .map((item, idx) => {\n              const child = item.children;\n              if (!isValidElement(child)) return null;\n              return cloneElement(child, {\n                ...child.props,\n                key: item.name + idx,\n              });\n            })}\n        </section>\n      </div>\n    </Render>\n  );\n};\n\nconst LoginPage: FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> = ({\n  children,\n  className,\n  ...divProps\n}) => {\n  return (\n    <Provider>\n      <Title>Example Title</Title>\n      <Username />\n      <Submit />\n      <Submit keyname=\"resetBtn\" type=\"reset\">\n        Reset\n      </Submit>\n      <Container {...divProps} className={`login-page-example ${className || ''}`}>\n        <RenderLogin />\n        {children}\n      </Container>\n    </Provider>\n  );\n};\n\ntype LoginComponent = FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>> & {\n  Title: typeof Title;\n};\nconst Login = LoginPage as LoginComponent;\nLogin.displayName = 'LoginExamplePage';\nLogin.Title = Title;\n\n// Here, we use the encapsulated <Login /> component\nconst Example = () => {\n  return <Login></Login>;\n};\n\nexport default Example;\n```\n",headings:[],headingsList:[]}}}]);
//# sourceMappingURL=286.c7d1a62e.chunk.js.map